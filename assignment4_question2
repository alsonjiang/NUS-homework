from random import shuffle


def binary_search(sorted_lst: list, target: int, itself: int) -> int:
    #itself parameter ensures it does not select itself in the input list
    low, high = 0, len(sorted_lst) - 1
    while low <= high:
        middle = (low + high) // 2
        if middle == itself: 
            break
        else:
            if sorted_lst[middle] == target: #target found
                return middle
            elif sorted_lst[middle] > target: #target is in left half
                high = middle - 1
            elif sorted_lst[middle] < target: #target is in the right half
                low = middle + 1
    return "not found" 
    #using a string as a false condition as false == 0
    #list[0] still has a value and it will create wrong matches

def matchResistors(R: tuple, n: int) -> list:

    result = []
    
    #create a sorted list from unsorted tuple input
    lst_R = sorted(list(R))

    #find corresponding resistor pair for every resistor
    corresponding_resistor = [n - value for value in lst_R]

    #search for matches, save to result
    for item, value in enumerate(corresponding_resistor):
        if value > 0: #ignore -ve values in corresponding_resistor
            match = binary_search(lst_R, value, item) #search for a match in the original list
            if match != "not found": 
                pair = lst_R[match]
                if lst_R[item] != -1: #check if itself is not already used in anothe pair
                    result.append((pair, lst_R[item])) 
                    lst_R[match] = -1 #replace found value with -1. Did not remove value to maintain indexing

    return result

#test extremely long input
longList = [i for i in range(1, 100000)]
shuffle(longList)
print(len(matchResistors(longList,100000)))

#regular test + duplicate list test
#resistorsList = (75,80,90,77,88,91,60,74,73,70,55,93,59)
resistorsList = ()
resistorsListDuplicates = (10,12,40,12,10)

#print(matchResistors(resistorsList, 150)) #expected: 
#print(matchResistors(resistorsListDuplicates, 22)) #expected: [(12, 10), (12, 10)]

